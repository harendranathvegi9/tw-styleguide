/*
Color Mixins

Styleguide 5.1
 */

/*
.tw-colors(@colorList,@className,@i,@type);
 
Color class generator <br>
Eg:

```
.tw-colors(@tw-earths-tones,tw-clr-bg-earth,1);
.tw-colors(@tw-earths-tones,tw-clr-txt-earth,1);
```

@colorList - The list of colors to be looped over
@className - The output class name that will be suffixed with index of the color
@i - Index of the current item in the color list. Default: `1`
@type - Either  `'bg'` or `'txt'` background color or font color. Default: `'bg'`

Styleguide 5.1.1 
*/
.tw-colors(@colorList,@className,@i:1,@type:'bg') when (@i <= length(@colorList)){
  & when (@type = 'bg'){ 
    .@{className}-@{i}{
      background-color: extract(@colorList,@i) !important;
    }
    .tw-colors(@colorList,@className,(@i+1));
  }
  & when (@type = 'txt'){ 
    .@{className}-@{i}{
      color: extract(@colorList,@i) !important;
    }
    .tw-colors(@colorList,@className,(@i+1),'txt');
  }
};

// Clearfix
// 
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//  
// Eg:
// ```javascript
// .clearfix()
// ``` 
// 
// Styleguide 5.2      
.clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Responsive utilities
// -------------------------
// More easily include all the states for responsive-utilities.less.
.responsive-visibility() {
  display: block !important;
  table&  { display: table; }
  tr&     { display: table-row !important; }
  th&,
  td&     { display: table-cell !important; }
}

.responsive-invisibility() {
    &,
  tr&,
  th&,
  td& { display: none !important; }
}

// Grid System
// -----------

// Centered container element
.container-fixed() {
  margin-right: auto;
  margin-left: auto;
  padding-left:  (@twsg-grid-gutter-width / 2);
  padding-right: (@twsg-grid-gutter-width / 2);
  .clearfix();
}

// Creates a wrapper for a series of columns
.make-row(@gutter: @twsg-grid-gutter-width) {
  margin-left:  (@gutter / -2);
  margin-right: (@gutter / -2);
  .clearfix();
}

// Generate the extra small columns
.make-xs-column(@columns; @gutter: @twsg-grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage((@columns / @twsg-grid-columns));
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);
}

// Generate the small columns
.make-sm-column(@columns; @gutter: @twsg-grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: @screen-sm-min) {
    float: left;
    width: percentage((@columns / @twsg-grid-columns));
  }
}

// Generate the small column offsets
.make-sm-column-offset(@columns) {
  @media (min-width: @screen-sm-min) {
    margin-left: percentage((@columns / @twsg-grid-columns));
  }
}
.make-sm-column-push(@columns) {
  @media (min-width: @screen-sm-min) {
    left: percentage((@columns / @twsg-grid-columns));
  }
}
.make-sm-column-pull(@columns) {
  @media (min-width: @screen-sm-min) {
    right: percentage((@columns / @twsg-grid-columns));
  }
}

// Generate the medium columns
.make-md-column(@columns; @gutter: @twsg-grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: @screen-md-min) {
    float: left;
    width: percentage((@columns / @twsg-grid-columns));
  }
}

// Generate the medium column offsets
.make-md-column-offset(@columns) {
  @media (min-width: @screen-md-min) {
    margin-left: percentage((@columns / @twsg-grid-columns));
  }
}
.make-md-column-push(@columns) {
  @media (min-width: @screen-md) {
    left: percentage((@columns / @twsg-grid-columns));
  }
}
.make-md-column-pull(@columns) {
  @media (min-width: @screen-md-min) {
    right: percentage((@columns / @twsg-grid-columns));
  }
}

// Generate the large columns
.make-lg-column(@columns; @gutter: @twsg-grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: @screen-lg-min) {
    float: left;
    width: percentage((@columns / @twsg-grid-columns));
  }
}

// Generate the large column offsets
.make-lg-column-offset(@columns) {
  @media (min-width: @screen-lg-min) {
    margin-left: percentage((@columns / @twsg-grid-columns));
  }
}
.make-lg-column-push(@columns) {
  @media (min-width: @screen-lg-min) {
    left: percentage((@columns / @twsg-grid-columns));
  }
}
.make-lg-column-pull(@columns) {
  @media (min-width: @screen-lg-min) {
    right: percentage((@columns / @twsg-grid-columns));
  }
}


// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@twsg-grid-columns`.

.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .twsg-col(@index) when (@index = 1) { // initial
    @item: ~".twsg-col-xs-@{index}, .twsg-col-sm-@{index}, .twsg-col-md-@{index}, .twsg-col-lg-@{index}";
    .twsg-col(@index + 1, @item);
  }
  .twsg-col(@index, @list) when (@index =< @twsg-grid-columns) { // general; "=<" isn't a typo
    @item: ~".twsg-col-xs-@{index}, .twsg-col-sm-@{index}, .twsg-col-md-@{index}, .twsg-col-lg-@{index}";
    .twsg-col(@index + 1, ~"@{list}, @{item}");
  }
  .twsg-col(@index, @list) when (@index > @twsg-grid-columns) { // terminal
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left:  (@twsg-grid-gutter-width / 2);
      padding-right: (@twsg-grid-gutter-width / 2);
    }
  }
  .twsg-col(1); // kickstart it
}

.make-grid-columns-float(@class) {
  .twsg-col(@index) when (@index = 1) { // initial
    @item: ~".twsg-col-@{class}-@{index}";
    .twsg-col(@index + 1, @item);
  }
  .twsg-col(@index, @list) when (@index =< @twsg-grid-columns) { // general
    @item: ~".twsg-col-@{class}-@{index}";
    .twsg-col(@index + 1, ~"@{list}, @{item}");
  }
  .twsg-col(@index, @list) when (@index > @twsg-grid-columns) { // terminal
    @{list} {
      float: left;
    }
  }
  .twsg-col(1); // kickstart it
}

.calc-grid(@index, @class, @type) when (@type = width) and (@index > 0) {
  .twsg-col-@{class}-@{index} {
    width: percentage((@index / @twsg-grid-columns));
  }
}
.calc-grid(@index, @class, @type) when (@type = push) {
  .twsg-col-@{class}-push-@{index} {
    left: percentage((@index / @twsg-grid-columns));
  }
}
.calc-grid(@index, @class, @type) when (@type = pull) {
  .twsg-col-@{class}-pull-@{index} {
    right: percentage((@index / @twsg-grid-columns));
  }
}
.calc-grid(@index, @class, @type) when (@type = offset) {
  .twsg-col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @twsg-grid-columns));
  }
}

// Basic looping in LESS
.make-grid(@index, @class, @type) when (@index >= 0) {
  .calc-grid(@index, @class, @type);
  // next iteration
  .make-grid(@index - 1, @class, @type);
}


//Code
.code(){
  font-family: monospace;
  padding: 2px 4px;
  font-size: 90%;
  color: #c7254e;
  background-color: #f9f2f4;
  border-radius: 4px;
}

